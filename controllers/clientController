'use strict';

const firebase = require('../Database');
const client = require('../models/client');
require('firebase/firestore')
const firestore = firebase.firestore;

const addClient = async (req, res) => {
    try {
        const data = req.body;
        await firestore.collection('clients').doc().set(data);
        res.send('Record saved successfuly');
    } catch (error) {
        res.status(400).send(error.message);
    }
}

const getAllClients = async (req, res, next) => {
    try {
        const clients = await firestore.collection('clients');
        const data = await clients.get();
        const clientsArray = [];
        if(data.empty) {
            res.status(404).send('No client record found');
        }else {
            data.forEach(doc => {
                const client = new client(
                    doc.id,
                    doc.data().firstName,
                    doc.data().lastName,
                    doc.data().birthday,
                    doc.data().phoneNumber,
                    doc.data().cin,
                );
                clientsArray.push(client);
            });
            res.send("aaaa "+clientsArray);
        }
    } catch (error) {
        res.status(400).send(error.message);
    }
}
/*
const getclient = async (req, res, next) => {
    try {
        const id = req.params.id;
        const client = await firestore.collection('clients').doc(id);
        const data = await client.get();
        if(!data.exists) {
            res.status(404).send('client with the given ID not found');
        }else {
            res.send(data.data());
        }
    } catch (error) {
        res.status(400).send(error.message);
    }
}

const updateclient = async (req, res, next) => {
    try {
        const id = req.params.id;
        const data = req.body;
        const client =  await firestore.collection('clients').doc(id);
        await client.update(data);
        res.send('client record updated successfuly');        
    } catch (error) {
        res.status(400).send(error.message);
    }
}

const deleteclient = async (req, res, next) => {
    try {
        const id = req.params.id;
        await firestore.collection('clients').doc(id).delete();
        res.send('Record deleted successfuly');
    } catch (error) {
        res.status(400).send(error.message);
    }
}
*/
module.exports = {
    addClient,
    getAllClients
}